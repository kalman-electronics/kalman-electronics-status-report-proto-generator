/**
 * @file {{ protocol.subsystem }}_instance.h
 * @brief Instance file for the {{ protocol.subsystem }} subsystem, containing structure managing subsystem's status
 */
{%- macro snake_to_camel(snake_case_str) -%}
    {{ snake_case_str |  replace('_', ' ') | title | replace('_', '') | replace(' ', '') }}
{%- endmacro -%}
#ifndef KALMAN_STATUS_REPORT_{{ protocol.subsystem | upper }}_INSTANCE_H_
#define KALMAN_STATUS_REPORT_{{ protocol.subsystem | upper }}_INSTANCE_H_

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

// Include standard libraries
{%- for clib in clibraries %}
#include <{{ clib }}>
{%- endfor %}

// Include user libraries
{%- for lib in libraries %}
#include "{{ lib }}"
{%- endfor %}

//TODO: Automatic frame sending
/**
 * @brief Instance structure for the {{ protocol.subsystem }} subsystem
 */
typedef struct {
    {%- for frame in protocol.frames %}
    KSRP_{{ snake_to_camel(protocol.subsystem) }}_{{ snake_to_camel (frame.name | upper) }}_Frame {{ frame.name }}_instance;
    {%- endfor %}
    {% for frame in protocol.frames %}
    uint32_t {{ frame.name }}_ms_since_last_update;
    {%- endfor  %}
    {% for frame in protocol.frames %}
    KSRP_FrameUpdateCallback {{ frame.name }}_callback;
    {%- endfor  %}

    KSRP_Status (*send_frame_callback)(KSRP_RawData_Frame* frame);
} KSRP_{{ snake_to_camel(protocol.subsystem) }}_Instance;

/**
 * @brief Initialize all frames in the instance
 *
 * @param instance The instance to initialize
 * @return KSRP_Status The status of the initialization, KSRP_STATUS_OK if successful
 */
_nonnull_
KSRP_Status KSRP_Init_{{ snake_to_camel(protocol.subsystem) }}_Instance(KSRP_{{ snake_to_camel(protocol.subsystem) }}_Instance* instance);

/**
 * @brief Update a frame in the instance
 *
 * @param instance The instance to update
 * @param frame_id The ID of the frame to update
 * @param frame The new frame data
 * @param frame_size The size of the new frame data
 * @return KSRP_Status The status of the update, KSRP_STATUS_OK if successful
 */
_nonnull_
KSRP_Status KSRP_UpdateFrame_{{ snake_to_camel(protocol.subsystem) }}_Instance(
    KSRP_{{ snake_to_camel(protocol.subsystem) }}_Instance* instance,
    KSRP_{{ snake_to_camel(protocol.subsystem) }}_FrameID frame_id,
    void* frame, size_t frame_size);

/**
 * @brief Update a field in a frame in the instance
 *
 * @param instance The instance to update
 * @param frame_id The ID of the frame to update
 * @param field_id The ID of the field to update
 * @param value The new field data
 * @param value_size The size of the new field data
 * @return KSRP_Status The status of the update, KSRP_STATUS_OK if successful
 */
_nonnull_
KSRP_Status KSRP_UpdateFrameField_{{ snake_to_camel(protocol.subsystem) }}_Instance(
    KSRP_{{ snake_to_camel(protocol.subsystem) }}_Instance* instance,
    KSRP_{{ snake_to_camel(protocol.subsystem) }}_FrameID frame_id, uint32_t field_id,
    void* value, size_t value_size);

/**
 * @brief Update the time since last update for all frames in the instance
 *
 * @param instance The instance to update
 * @param ms_since_last_update Time delta since last update (in ms)
 * @return KSRP_Status The status of the update, KSRP_STATUS_OK if successful
 */
_nonnull_
KSRP_Status KSRP_UpdateTime_{{ snake_to_camel(protocol.subsystem) }}_Instance(
    KSRP_{{ snake_to_camel(protocol.subsystem) }}_Instance* instance,
    uint32_t ms_since_last_update);

/**
 * @brief Get the time since last update for a frame in the instance
 *
 * @param instance The instance to get the time from
 * @param frame_id The ID of the frame to get the time from
 * @return uint32_t The time since the last update (in ms)
 */
_nonnull_
uint32_t KSRP_{{ snake_to_camel(protocol.subsystem) }}_Instance_GetTimeSinceLastUpdate(
    KSRP_{{ snake_to_camel(protocol.subsystem) }}_Instance* instance,
    KSRP_{{ snake_to_camel(protocol.subsystem) }}_FrameID frame_id);

/**
 * @brief Set the callback for a frame in the instance, callback is called when frame value is changed
 *
 * @param instance The instance to set the callback for
 * @param frame_id The ID of the frame to set the callback for
 * @param callback The callback function to set
 * @return KSRP_Status The status of the operation, KSRP_STATUS_OK if successful
 */
_nonnull_
KSRP_Status KSRP_{{ snake_to_camel(protocol.subsystem) }}_Instance_SetSendFrameCallback(
    KSRP_{{ snake_to_camel(protocol.subsystem) }}_Instance* instance,
    KSRP_Status (*send_frame_callback)(KSRP_RawData_Frame* frame));

/**
 * @brief Set the callback for a frame in the instance, callback is called when frame value is changed
 *
 * @param instance The instance to set the callback for
 * @param frame_id The ID of the frame to set the callback for
 * @param callback The callback function to set
 * @return KSRP_Status The status of the operation, KSRP_STATUS_OK if successful
 */
_nonnull_
KSRP_Status KSRP_{{ snake_to_camel(protocol.subsystem) }}_Instance_SetCallback(
    KSRP_{{ snake_to_camel(protocol.subsystem) }}_Instance* instance,
    KSRP_{{ snake_to_camel(protocol.subsystem) }}_FrameID frame_id,
    KSRP_FrameUpdateCallback callback);

#ifdef __cplusplus
}
#endif // __cplusplus

#endif // KALMAN_STATUS_REPORT_{{ protocol.subsystem | upper }}_INSTANCE_H_