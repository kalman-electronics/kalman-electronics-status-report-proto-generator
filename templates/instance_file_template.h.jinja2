/**
 * @file {{ protocol.subsystem }}_instance.h
 * @brief Instance file for the {{ protocol.subsystem }} subsystem, containing structure managing subsystem's status
 */
{%- macro snake_to_camel(snake_case_str) -%}
    {{ snake_case_str |  replace('_', ' ') | title | replace('_', '') | replace(' ', '') }}
{%- endmacro -%}
#ifndef KALMAN_STATUS_REPORT_{{ protocol.subsystem | upper }}_INSTANCE_H_
#define KALMAN_STATUS_REPORT_{{ protocol.subsystem | upper }}_INSTANCE_H_

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

// Include standard libraries
{%- for clib in clibraries %}
#include <{{ clib }}>
{%- endfor %}

// Include user libraries
{%- for lib in libraries %}
#include "{{ lib }}"
{%- endfor %}

//TODO: Automatic frame sending
/**
 * @brief Instance structure for the {{ protocol.subsystem }} subsystem
 */
typedef struct {
    {%- for frame in protocol.frames %}
    KSRP_{{ snake_to_camel(protocol.subsystem) }}_{{ snake_to_camel (frame.name | upper) }}_Frame {{ frame.name }}_instance;
    {%- endfor %}
    {% for frame in protocol.frames %}
    uint32_t {{ frame.name }}_ms_since_last_update;
    {%- endfor  %}
    {% for frame in protocol.frames %}
    KSRP_FrameUpdateCallback {{ frame.name }}_callback;
    {%- endfor  %}
} KSRP_{{ snake_to_camel(protocol.subsystem) }}_Instance;

/**
 * @brief Initialize all frames in the instance
 *
 * @param instance The instance to initialize
 * @return KSRP_Status The status of the initialization, KSRP_STATUS_OK if successful
 */
_nonnull_
KSRP_Status KSRP_Init_{{ snake_to_camel(protocol.subsystem) }}_Instance(KSRP_{{ snake_to_camel(protocol.subsystem) }}_Instance* instance) {
    {%- for frame in protocol.frames %}
    if (KSRP_Init_{{ snake_to_camel(protocol.subsystem) }}_{{ snake_to_camel(frame.name) }}_Frame(&instance->{{ frame.name }}_instance) != KSRP_STATUS_OK) {
        return KSRP_STATUS_ERROR;
    }
    {%- endfor  %}
    return KSRP_STATUS_OK;
}

/**
 * @brief Update a frame in the instance
 *
 * @param instance The instance to update
 * @param frame_id The ID of the frame to update
 * @param frame The new frame data
 * @param frame_size The size of the new frame data
 * @return KSRP_Status The status of the update, KSRP_STATUS_OK if successful
 */
_nonnull_
KSRP_Status KSRP_UpdateFrame_{{ snake_to_camel(protocol.subsystem) }}_Instance(
    KSRP_{{ snake_to_camel(protocol.subsystem) }}_Instance* instance,
    KSRP_{{ snake_to_camel(protocol.subsystem) }}_FrameID frame_id,
    void* frame, size_t frame_size) {

    switch(frame_id) {
        {%- for frame in protocol.frames %}
        case KSRP_{{ protocol.subsystem | upper }}_{{ frame.name | upper }}_FRAME_ID: {
            if (frame_size != KSRP_{{ protocol.subsystem | upper }}_{{ frame.name | upper }}_FRAME_SIZE) {
                return KSRP_STATUS_INVALID_DATA_SIZE;
            }

            memcpy(&instance->{{ frame.name }}_instance, frame, frame_size);
            instance->{{ frame.name }}_ms_since_last_update = 0;
            instance->{{ frame.name }}_callback(
                KSRP_{{ protocol.subsystem | upper }}_SUBSYSTEM_ID,
                &instance->{{ frame.name }}_instance,
                KSRP_{{ protocol.subsystem | upper }}_{{ frame.name | upper }}_FRAME_ID,
                KSRP_ILLEGAL_FIELD_ID);

            break;
        }
        {%- endfor %}
        default:
            return KSRP_STATUS_INVALID_FRAME_TYPE;
    }

    return KSRP_STATUS_OK;
}

/**
 * @brief Update a field in a frame in the instance
 *
 * @param instance The instance to update
 * @param frame_id The ID of the frame to update
 * @param field_id The ID of the field to update
 * @param value The new field data
 * @param value_size The size of the new field data
 * @return KSRP_Status The status of the update, KSRP_STATUS_OK if successful
 */
_nonnull_
KSRP_Status KSRP_UpdateFrameField_{{ snake_to_camel(protocol.subsystem) }}_Instance(
    KSRP_{{ snake_to_camel(protocol.subsystem) }}_Instance* instance,
    KSRP_{{ snake_to_camel(protocol.subsystem) }}_FrameID frame_id, uint32_t field_id,
    void* value, size_t value_size) {

    switch(frame_id) {
        {%- for frame in protocol.frames %}
        case KSRP_{{ protocol.subsystem | upper }}_{{ frame.name | upper }}_FRAME_ID:
            switch(field_id) {
            {%- for field in frame.fields %}
                case KSRP_{{ protocol.subsystem | upper }}_{{ frame.name | upper }}_{{ field.name | upper }}_FIELD_ID:
                    if (value_size != sizeof(instance->{{ frame.name }}_instance.{{ field.name }})) {
                        return KSRP_STATUS_INVALID_DATA_SIZE;
                    }

                    memcpy(&instance->{{ frame.name }}_instance.{{ field.name }}, value, value_size);
                    instance->{{ frame.name }}_ms_since_last_update = 0;

                    break;
                {%- endfor %}
                default:
                    return KSRP_STATUS_INVALID_FIELD_TYPE;
            }
            instance->{{ frame.name }}_callback(
                KSRP_{{ protocol.subsystem | upper }}_SUBSYSTEM_ID,
                &instance->{{ frame.name }}_instance,
                KSRP_{{ protocol.subsystem | upper }}_{{ frame.name | upper }}_FRAME_ID,
                field_id);
            break;
            {%- for field in frame.fields %}

            {%- endfor %}
        {%- endfor %}
        default:
            return KSRP_STATUS_INVALID_FRAME_TYPE;
    }
    return KSRP_STATUS_OK;
}

/**
 * @brief Update the time since last update for all frames in the instance
 *
 * @param instance The instance to update
 * @param ms_since_last_update Time delta since last update (in ms)
 * @return KSRP_Status The status of the update, KSRP_STATUS_OK if successful
 */
_nonnull_
KSRP_Status KSRP_UpdateTime_{{ snake_to_camel(protocol.subsystem) }}_Instance(
    KSRP_{{ snake_to_camel(protocol.subsystem) }}_Instance* instance, uint32_t ms_since_last_update) {

    {%- for frame in protocol.frames %}
    instance->{{ frame.name }}_ms_since_last_update += ms_since_last_update;
    {%- endfor %}

    return KSRP_STATUS_OK;
}

/**
 * @brief Get the time since last update for a frame in the instance
 *
 * @param instance The instance to get the time from
 * @param frame_id The ID of the frame to get the time from
 * @return uint32_t The time since the last update (in ms)
 */
_nonnull_
uint32_t KSRP_{{ snake_to_camel(protocol.subsystem) }}_Instance_GetTimeSinceLastUpdate(
    KSRP_{{ snake_to_camel(protocol.subsystem) }}_Instance* instance, KSRP_{{ snake_to_camel(protocol.subsystem) }}_FrameID frame_id) {

    switch(frame_id) {
        {%- for frame in protocol.frames %}
        case KSRP_{{ protocol.subsystem | upper }}_{{ frame.name | upper }}_FRAME_ID:
            return instance->{{ frame.name }}_ms_since_last_update;
        {%- endfor %}
        default:
            return 0xFFFFFFFF;
    }
}

_nonnull_
KSRP_Status KSRP_{{ snake_to_camel(protocol.subsystem) }}_Instance_SetCallback(
    KSRP_{{ snake_to_camel(protocol.subsystem) }}_Instance* instance,
    KSRP_{{ snake_to_camel(protocol.subsystem) }}_FrameID frame_id,
    KSRP_FrameUpdateCallback callback) {

    switch(frame_id) {
        {%- for frame in protocol.frames %}
        case KSRP_{{ protocol.subsystem | upper }}_{{ frame.name | upper }}_FRAME_ID:
            instance->{{ frame.name }}_callback = callback;
            break;
        {%- endfor %}
        default:
            return KSRP_STATUS_INVALID_FRAME_TYPE;
    }

    return KSRP_STATUS_OK;
}

#ifdef __cplusplus
}
#endif // __cplusplus

#endif // KALMAN_STATUS_REPORT_{{ protocol.subsystem | upper }}_INSTANCE_H_