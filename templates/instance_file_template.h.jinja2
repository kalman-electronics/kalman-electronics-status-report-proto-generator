{%- macro snake_to_camel(snake_case_str) -%}
    {{ snake_case_str |  replace('_', ' ') | title | replace('_', '') | replace(' ', '') }}
{%- endmacro -%}
#ifndef KALMAN_STATUS_REPORT_{{ protocol.subsystem | upper }}_INSTANCE_H_
#define KALMAN_STATUS_REPORT_{{ protocol.subsystem | upper }}_INSTANCE_H_

// Include standard libraries
{%- for clib in clibraries %}
#include <{{ clib }}>
{%- endfor %}

// Include user libraries
{%- for lib in libraries %}
#include "{{ lib }}"
{%- endfor %}

typedef struct {
    {%- for frame in protocol.frames %}
    KSRP_{{ snake_to_camel(protocol.subsystem) }}_{{ snake_to_camel (frame.name | upper) }}_Frame {{ frame.name }}_instance;
    {%- endfor %}
    {% for frame in protocol.frames %}
    uint32_t {{ frame.name }}_ms_since_last_update;
    {%- endfor  %}
} KSRP_{{ snake_to_camel(protocol.subsystem) }}_Instance;

_nonnull_
KSRP_Status KSRP_{{ snake_to_camel(protocol.subsystem) }}_Instance_Init(KSRP_{{ snake_to_camel(protocol.subsystem) }}_StatusReport_Instance* instance) {
    // TODO: Initialize all the instances
    return KSRP_STATUS_OK;
}

_nonnull_
KSRP_Status KSRP_{{ snake_to_camel(protocol.subsystem) }}_Instance_UpdateFrame(
    KSRP_{{ snake_to_camel(protocol.subsystem) }}_Instance* instance,
    KSRP_{{ snake_to_camel(protocol.subsystem) }}_FrameID frame_id,
    void* frame, size_t frame_size) {

    switch(frame_id) {
        {%- for frame in protocol.frames %}
        case KSRP_{{ snake_to_camel(protocol.subsystem) }}_{{ snake_to_camel(frame.name | upper) }}_FRAME_ID: {
            if (frame_size != KSRP_{{ snake_to_camel(protocol.subsystem) }}_{{ snake_to_camel(frame.name | upper) }}_FRAME_SIZE) {
                return KSRP_STATUS_INVALID_DATA_SIZE;
            }

            memcpy(&instance->{{ frame.name }}_instance, frame, frame_size);
            instance->{{ frame.name }}_ms_since_last_update = 0;

            break;
        }
        {%- endfor %}
        default:
            return KSRP_STATUS_INVALID_FRAME_TYPE;
    }

    return KSRP_STATUS_OK;
}

_nonnull_
KSRP_Status KSRP_{{ snake_to_camel(protocol.subsystem) }}_Instance_UpdateFrameField(
    KSRP_{{ snake_to_camel(protocol.subsystem) }}_Instance* instance,
    KSRP_{{ snake_to_camel(protocol.subsystem) }}_FrameID frame_id, uint32_t field_id,
    void* value, size_t value_size) {

    switch(frame_id) {
        {%- for frame in protocol.frames %}
        case KSRP_{{ snake_to_camel(protocol.subsystem) }}_{{ snake_to_camel(frame.name | upper) }}_FRAME_ID:
            switch(field_id) {
            {%- for field in frame.fields %}
                case KSRP_{{ protocol.subsystem | upper }}_{{ frame.name | upper }}_{{ field.name | upper }}_FIELD_ID:
                    if (value_size != sizeof(instance->{{ frame.name }}_instance.{{ field.name }}) {
                        return KSRP_STATUS_INVALID_DATA_SIZE;
                    }

                    memcpy(&instance->{{ frame.name }}_instance.{{ field.name }}, value, value_size);
                    instance->{{ frame.name }}_ms_since_last_update = 0;

                    break;
                {%- endfor %}
                default:
                    return KSRP_STATUS_INVALID_FIELD_TYPE;
            }
            {%- for field in frame.fields %}

            {%- endfor %}
        {%- endfor %}
        default:
            return KSRP_STATUS_INVALID_FRAME_TYPE;
    }
    return KSRP_STATUS_OK;
}

#endif // KALMAN_STATUS_REPORT_{{ protocol.subsystem | upper }}_INSTANCE_H_