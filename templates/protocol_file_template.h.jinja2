{%- macro snake_to_camel(snake_case_str) -%}
{{ snake_case_str |  replace('_', ' ') | title | replace('_', '') | replace(' ', '') }}
{%- endmacro -%}
#ifndef KALMAN_STATUS_REPORT_{{ protocol.subsystem | upper }}_H_
#define KALMAN_STATUS_REPORT_{{ protocol.subsystem | upper }}_H_

// Include standard libraries
{%- for clib in clibraries %}
#include <{{ clib }}>
{%- endfor %}

// Include user libraries
{%- for lib in libraries %}
#include "{{ lib }}"
{%- endfor %}

// Enum for all frame IDs in given subsystem
// ASSUMPTION: Values won't exceed 1 byte (255)
typedef enum {
    {%- for frame in protocol.frames %}
    KSRP_{{ protocol.subsystem | upper }}_{{ frame.name | upper }}_FRAME_ID = {{ frame.id }},
    {%- endfor %}
} KSRP_{{ snake_to_camel(protocol.subsystem) }}_FrameID;

{% for frame in protocol.frames -%}
{%- set define_unique_id = protocol.subsystem | upper ~ '_' ~ frame.name | upper%}
{%- set frame_unique_id = snake_to_camel(protocol.subsystem) ~ '_' ~ snake_to_camel(frame.name | upper) %}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// {{ snake_to_camel(frame.name | upper) }} Frame
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{% for field in frame.fields if field.is_health_check  %}
typedef enum {
    {%- for health_check in field.health_checks %}
        {%- if health_check.type == 'exact'%}
    KSRP_{{ define_unique_id }}_{{ field.name | upper }}_HEALTH_CHECK_{{health_check.result | upper}}_{{ loop.index0 + 1}} = {{ health_check.value }},
            {%- elif health_check.type == 'range'%}       
    KSRP_{{ define_unique_id }}_{{ field.name | upper }}_HEALTH_CHECK_{{health_check.result | upper}}_{{ loop.index0 + 1}}_MIN = {{ health_check.min }},
    KSRP_{{ define_unique_id }}_{{ field.name | upper }}_HEALTH_CHECK_{{health_check.result | upper}}_{{ loop.index0 + 1}}_MAX = {{ health_check.max }},
        {%- endif %}
    {%- endfor %}
} KSRP_{{ frame_unique_id }}_{{ snake_to_camel(field.name) }}_HealthCheck;
{% endfor %}

{%- for field in frame.fields if field.is_health_check -%}
    {%- for health_check in field.health_checks %}
        {%-if health_check.troubleshoot != none%}
#define KSRP_{{ define_unique_id }}_{{field.name | upper}}_HEALTH_CHECK_{{health_check.result | upper}}_{{ loop.index0 + 1}}_TROUBLESHOOT "{{ health_check.troubleshoot }}"
        {%-endif%}
    {%- endfor %}
{%- endfor %}

{%- for field in frame.fields if field.is_health_check -%}
    {%- for health_check in field.health_checks %}
        {%-if health_check.description != none %}
#define KSRP_{{ define_unique_id }}_{{field.name | upper}}_HEALTH_CHECK_{{health_check.result | upper}}_{{ loop.index0 + 1}}_DESCRIPTION "{{health_check.description }}"
        {%-endif %}
    {%- endfor %}
{%- endfor %}
{% for field in frame.fields %}
{%- if field.is_enum %}
typedef enum {
    {%-for value in field.values %}
        {%-if value is mapping %}
    {{ field.name | upper ~ '_' ~ value | first }} = {{ value[value | first] }},
        {%-else %}
    {{ field.name | upper ~ '_' ~ value }},
        {%-endif %}
    {%-endfor %}
} {{ field.type }};
{%endif %}

{%- endfor %}

{%- set frame_type = 'KSRP_' ~ frame_unique_id~ '_Frame' %}
typedef struct _packed_ {
    {%- for field in frame.fields %}
        {%- if field.is_type_cast  %}
    {{ field.cast_type }} {{ field.name }};
        {%- else %}
    {{ field.type }} {{ field.name }};
        {%- endif %}
    {%- endfor %}
} {{ frame_type }};

#define KSRP_{{ define_unique_id }}_TYPE_ID ( \
    KSRP_MAKE_TYPE_ID(KSRP_{{ protocol.subsystem | upper }}_SUBSYSTEM_ID, \
    KSRP_{{ define_unique_id }}_FRAME_ID))

bool KSRP_IsTypeIDInstanceof_{{ frame_unique_id }}(KSRP_TypeID type_id) {
    return type_id == KSRP_{{ define_unique_id }}_TYPE_ID;
}

bool KSRP_IsRawDataInstanceof_{{ frame_unique_id }}(const KSRP_RawData_Frame* raw_data) {
    return raw_data->length == sizeof({{ frame_type }}) + KSRP_ID_BYTES &&
        KSRP_IsTypeIDInstanceof_{{ frame_unique_id }}(KSRP_MAKE_TYPE_ID(raw_data->data[0], raw_data->data[1]));
}

#define KSRP_{{ define_unique_id }}_FRAME_SIZE sizeof({{ frame_type }})

typedef enum {
    {%- for field in frame.fields %}
    KSRP_{{ define_unique_id }}_{{ field.name | upper }}_FIELD_ID,
    {%- endfor %}
} KSRP_{{ frame_unique_id }}_FieldID;

/////////////////////////////////////////////////////////////////////////////////
/// {{ snake_to_camel(frame.name | upper) }} Setters
/////////////////////////////////////////////////////////////////////////////////
{%- for field in frame.fields %}
_nonnull_
void KSRP_Set_{{ frame_unique_id}}_{{ snake_to_camel(field.name) }}({{ frame_type }}* frame, {{ field.type }} value) {
    {%- if field.is_type_cast %}
    frame->{{ field.name }} = ({{ field.cast_type }})value;
    {%- else %}
    frame->{{ field.name }} = value;
    {%- endif  %}
}
{% endfor %}

/////////////////////////////////////////////////////////////////////////////////
/// {{ snake_to_camel(frame.name | upper) }} Getters
/////////////////////////////////////////////////////////////////////////////////
{%- for field in frame.fields %}
_nonnull_
{{ field.type }} KSRP_Get_{{ frame_unique_id}}_{{ snake_to_camel(field.name) }}(const {{ frame_type }}* frame) {
{%- if field.is_type_cast %}
    return ({{ field.type }})frame->{{ field.name }};
{%- else %}
    return frame->{{ field.name }};
{%- endif  %}
}
{% endfor %}

/////////////////////////////////////////////////////////////////////////////////
/// {{ snake_to_camel(frame.name | upper) }} Frame Construction
/////////////////////////////////////////////////////////////////////////////////
_nonnull_
KSRP_Status KSRP_Init_{{ frame_unique_id }}_Frame({{ frame_type }}* frame) {
{#- TODO: Initialization  #}
    return KSRP_STATUS_OK;
}

_nonnull_
KSRP_Status KSRP_Unpack_{{ frame_unique_id }}(const KSRP_RawData_Frame* raw_data, {{ frame_type }}* frame) {
    if (raw_data->length != sizeof({{ frame_type }}) + KSRP_ID_BYTES) {
        return KSRP_STATUS_INVALID_DATA_SIZE;
    }

    if (!KSRP_IsRawDataInstanceof_{{ frame_unique_id }}(raw_data)) {
        return KSRP_STATUS_INVALID_FRAME_TYPE;
    }
    {#- TODO: cast for 1-byte not being uint8_t  #}
    {% for field in frame.fields %}
        {%- if field.actual_size == 1 %}
    frame->{{ field.name }} = raw_data->data[{{ field.offset }} + KSRP_ID_BYTES];
        {%- elif field.is_type_cast %}
    frame->{{ field.name }} = *(({{ field.cast_type }}*)&raw_data->data[{{ field.offset }} + KSRP_ID_BYTES]);
        {%- else %}
    frame->{{ field.name }} = *(({{ field.type }}*)&raw_data->data[{{ field.offset }} + KSRP_ID_BYTES]);
        {%- endif  %}
    {%- endfor %}

    return KSRP_STATUS_OK;
}

_nonnull_
KSRP_Status KSRP_Pack_{{ frame_unique_id }}(const {{ frame_type }}* frame, KSRP_RawData_Frame* raw_data) {
    if (raw_data->capacity < sizeof({{ frame_type }}) + KSRP_ID_BYTES) {
        return KSRP_STATUS_INVALID_DATA_SIZE;
    }

{#- TODO: cast for 1-byte not being uint8_t  #}
    raw_data->data[0] = KSRP_{{ protocol.subsystem | upper }}_SUBSYSTEM_ID;
    raw_data->data[1] = KSRP_{{ define_unique_id }}_FRAME_ID;
    {% for field in frame.fields %}
        {%- if field.actual_size == 1 %}
    raw_data->data[{{ field.offset }} + KSRP_ID_BYTES] = frame->{{ field.name }};
        {%- elif field.is_type_cast %}
    *(({{ field.cast_type }}*)&raw_data->data[{{ field.offset }} + KSRP_ID_BYTES]) = frame->{{ field.name }};
        {%- else %}
    *(({{ field.type }}*)&raw_data->data[{{ field.offset }} + KSRP_ID_BYTES]) = frame->{{ field.name }};
        {%- endif  %}
    {%- endfor %}

    raw_data->length = sizeof({{ frame_type }}) + KSRP_ID_BYTES;

    return KSRP_STATUS_OK;
}

/////////////////////////////////////////////////////////////////////////////////
/// {{ snake_to_camel(frame.name | upper) }} Health Checks
/////////////////////////////////////////////////////////////////////////////////
{%- for field in frame.fields if field.is_health_check %}
_nonnull_
KSRP_HealthCheckResult KSRP_HealthCheckResult_{{ frame_unique_id }}_{{ snake_to_camel(field.name) }}(const {{ frame_type }}* frame) {
    {%- for health_check in field.health_checks %}
        {%- if health_check.type == 'exact' %}
    if (frame->{{ field.name }} == KSRP_{{ define_unique_id }}_{{field.name | upper}}_HEALTH_CHECK_{{health_check.result | upper}}_{{ loop.index0 + 1}}) {
        return KSRP_RESULT_{{ health_check.result | upper }};
    }
        {%- elif health_check.type == 'range' %}
    if (frame->{{ field.name }} >= KSRP_{{ define_unique_id }}_{{field.name | upper}}_HEALTH_CHECK_{{health_check.result | upper}}_{{ loop.index0 + 1}}_MIN
            && frame->{{ field.name }} < KSRP_{{ define_unique_id }}_{{field.name | upper}}_HEALTH_CHECK_{{health_check.result | upper}}_{{ loop.index0 + 1}}_MAX) {
        return KSRP_RESULT_{{ health_check.result | upper }};
    }
        {%- endif %}
    {%- endfor %}
    return KSRP_RESULT_UNKNOWN;
}
{% endfor %}

{%- for field in frame.fields if field.is_health_check %}
_nonnull_
const char* KSRP_HealthCheckTroubleshoot_{{ frame_unique_id }}_{{ snake_to_camel(field.name) }}(const {{ frame_type }}* frame) {
    {%- for health_check in field.health_checks %}
        {%- if health_check.troubleshoot != none %}
            {%- if health_check.type == 'exact' %}
    if (frame->{{ field.name }} ==KSRP_{{ define_unique_id }}_{{field.name | upper}}_HEALTH_CHECK_{{health_check.result | upper}}_{{ loop.index0 + 1}}) {
        return KSRP_{{ define_unique_id }}_{{field.name | upper}}_HEALTH_CHECK_{{health_check.result | upper}}_{{ loop.index0 + 1}}_TROUBLESHOOT;
    }
            {%- elif health_check.type == 'range' %}
    if (frame->{{ field.name }} >= KSRP_{{ define_unique_id }}_{{field.name | upper}}_HEALTH_CHECK_{{health_check.result | upper}}_{{ loop.index0 + 1}}_MIN
            && frame->{{ field.name }} < KALMAN_STATUS_{{frame.name | upper}}_{{field.name | upper}}_HEALTH_CHECK_{{health_check.result | upper}}_{{ loop.index0 + 1}}_MAX) {
        return KSRP_{{ define_unique_id }}_{{field.name | upper}}_HEALTH_CHECK_{{health_check.result | upper}}_{{ loop.index0 + 1}}_TROUBLESHOOT;
    }    
            {%- endif %}
        {%- endif %}
    {%- endfor %}
    return "Unknown troubleshoot";
}
{% endfor -%}

{%- for field in frame.fields if field.is_health_check %}
_nonnull_
const char* KSRP_HealthCheckDescription_{{ frame_unique_id }}_{{ snake_to_camel(field.name) }}(const {{ frame_type }}* frame) {
    {%- for health_check in field.health_checks %}
        {%- if health_check.description != none %}
            {%- if health_check.type == 'exact' %}
    if (frame->{{ field.name }} == KSRP_{{ define_unique_id }}_{{field.name | upper}}_HEALTH_CHECK_{{health_check.result | upper}}_{{ loop.index0 + 1}}) {
        return KSRP_{{ define_unique_id }}_{{field.name | upper}}_HEALTH_CHECK_{{health_check.result | upper}}_{{ loop.index0 + 1}}_DESCRIPTION;
    }
            {%- elif health_check.type == 'range' %}
    if (frame->{{ field.name }} >= KSRP_{{ define_unique_id }}_{{field.name | upper}}_HEALTH_CHECK_{{health_check.result | upper}}_{{ loop.index0 + 1}}_MIN
            && frame->{{ field.name }} < KSRP_{{ define_unique_id }}_{{field.name | upper}}_HEALTH_CHECK_{{health_check.result | upper}}_{{ loop.index0 + 1}}_MAX) {
        return KSRP_{{ define_unique_id }}_{{field.name | upper}}_HEALTH_CHECK_{{health_check.result | upper}}_{{ loop.index0 + 1}}_DESCRIPTION;
    }    
            {%- endif %}
        {%- endif %}
    {%- endfor %}
    return "Unknown description";
}
{% endfor -%}

{% endfor %}

#endif // KALMAN_STATUS_REPORT_{{ protocol.subsytem | upper }}_H_