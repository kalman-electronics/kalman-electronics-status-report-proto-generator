{%- macro snake_to_camel(snake_case_str) -%}
{{ snake_case_str |  replace('_', ' ') | title | replace('_', '') | replace(' ', '') }}
{%- endmacro -%}

#ifndef KALMAN_STATUS_REPORT_{{ protocol.subsystem | upper }}_H_
#define KALMAN_STATUS_REPORT_{{ protocol.subsystem | upper }}_H_

// Include the standard libraries
{%- for clib in clibraries %}
#include <{{ clib }}>
{%- endfor %}

// Include the user libraries
{%- for lib in libraries %}
#include "{{ lib }}"
{%- endfor %}

#define KALMAN_STATUS_REPORT_PROTOCOL_SUBSYSTEM_ID {{ protocol.subsystem_id }}

{% for frame in protocol.frames -%}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// {{ frame.name }} Frame
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define KALMAN_STATUS_REPORT_{{ frame.name | upper }}_ID {{ frame.id }}
{% for field in frame.fields if field.is_health_check  %}
typedef enum {
    {%- for health_check in field.health_checks %}
        {%- if health_check.type == 'exact'%}
    KALMAN_STATUS_{{frame.name | upper}}_{{field.name | upper}}_HEALTH_CHECK_{{health_check.result | upper}}_{{ loop.index0 + 1}} = {{ health_check.value }},
            {%- elif health_check.type == 'range'%}       
    KALMAN_STATUS_{{frame.name | upper}}_{{field.name | upper}}_HEALTH_CHECK_{{health_check.result | upper}}_{{ loop.index0 + 1}}_MIN = {{ health_check.min }},
    KALMAN_STATUS_{{frame.name | upper}}_{{field.name | upper}}_HEALTH_CHECK_{{health_check.result | upper}}_{{ loop.index0 + 1}}_MAX = {{ health_check.max }},
        {%- endif %}
    {%- endfor %}
} {{ frame.name }}_{{ snake_to_camel(field.name) }}_HealthCheck_TypeDef;
{% endfor %}

{%- for field in frame.fields if field.is_health_check -%}
    {%- for health_check in field.health_checks if health_check.troubleshoot != none %}
#define KALMAN_STATUS_{{frame.name | upper}}_{{field.name | upper}}_HEALTH_CHECK_{{health_check.result | upper}}_{{ loop.index0 + 1}}_TROUBLESHOOT "{{ health_check.troubleshoot }}"
    {%- endfor %}
{%- endfor %}

{%- for field in frame.fields if field.is_health_check -%}
    {%- for health_check in field.health_checks if health_check.description != none %}
#define KALMAN_STATUS_{{frame.name | upper}}_{{field.name | upper}}_HEALTH_CHECK_{{health_check.result | upper}}_{{ loop.index0 + 1}}_DESCRIPTION "{{health_check.description }}"
    {%- endfor %}
{%- endfor %}
{% for field in frame.fields %}
{%- if field.is_enum %}
typedef enum {
    {%-for value in field.values %}
        {%-if value is mapping %}
    {{ field.name | upper ~ '_' ~ value | first }} = {{ value[value | first] }},
        {%-else %}
    {{ field.name | upper ~ '_' ~ value }},
        {%-endif %}
    {%-endfor %}
} {{ field.type }};
{%endif %}

{%- endfor %}

{%- set frame_type =  frame.name ~ '_FrameTypeDef' %}
typedef struct _packed_ {
    {%- for field in frame.fields %}
        {%- if field.is_type_cast  %}
    {{ field.cast_type }} {{ field.name }};
        {%- else %}
    {{ field.type }} {{ field.name }};
        {%- endif %}
    {%- endfor %}
} {{ frame_type }};

////////////////////////////////////////
/// Setters
////////////////////////////////////////
{%- for field in frame.fields %}
_nonnull_
void {{ frame.name }}_set_{{ field.name }}({{ frame_type }}* frame, {{ field.type }} value) {
    {%- if field.is_type_cast %}
    frame->{{ field.name }} = ({{ field.cast_type }})value;
    {%- else %}
    frame->{{ field.name }} = value;
    {%- endif  %}
}
{%- endfor %}

////////////////////////////////////////
/// Getters
////////////////////////////////////////
{%- for field in frame.fields %}
_nonnull_
{{ field.type }} {{ frame.name }}_get_{{ field.name }}(const {{ frame_type }}* frame) {
{%- if field.is_type_cast %}
    return ({{ field.type }})frame->{{ field.name }};
{%- else %}
    return frame->{{ field.name }};
{%- endif  %}
}
{%- endfor %}

KalmanProtocol_StatusTypeDef {{ frame.name }}_unpack(const RawDataFrame_TypeDef* raw_data, {{ frame_type }}* frame) {
    if (raw_data->length != sizeof({{ frame_type }}) + KALMAN_PROTOCOL_STATUS_REPORT_ID_BYTES) {
        return KALMAN_PROTOCOL_STATUS_INVALID_DATA_SIZE;
    }

    if (raw_data->data[0] != KALMAN_STATUS_REPORT_PROTOCOL_SUBSYSTEM_ID || raw_data->data[1] != KALMAN_STATUS_REPORT_{{ frame.name | upper }}_ID) {
        return KALMAN_PROTOCOL_STATUS_INVALID_FRAME_TYPE;
    }
    {% for field in frame.fields %}

        {%- if field.actual_size == 1 %}
    frame->{{ field.name }} = raw_data->data[{{ field.offset }} + KALMAN_PROTOCOL_STATUS_REPORT_ID_BYTES];
        {%- elif field.is_type_cast %}
    frame->{{ field.name }} = *(({{ field.cast_type }}*)&raw_data->data[{{ field.offset }} + KALMAN_PROTOCOL_STATUS_REPORT_ID_BYTES]);
        {%- else %}
    frame->{{ field.name }} = *(({{ field.type }}*)&raw_data->data[{{ field.offset }} + KALMAN_PROTOCOL_STATUS_REPORT_ID_BYTES]);
        {%- endif  %}
    {%- endfor %}

    return KALMAN_PROTOCOL_STATUS_OK;
}

KalmanProtocol_StatusTypeDef {{ frame.name }}_pack(const {{ frame_type }}* frame, RawDataFrame_TypeDef* raw_data) {
    if (raw_data->capacity < sizeof({{ frame_type }}) + KALMAN_PROTOCOL_STATUS_REPORT_ID_BYTES) {
        return KALMAN_PROTOCOL_STATUS_INVALID_DATA_SIZE;
    }

    raw_data->data[0] = KALMAN_STATUS_REPORT_PROTOCOL_SUBSYSTEM_ID;
    raw_data->data[1] = KALMAN_STATUS_REPORT_{{ frame.name | upper }}_ID;
    {% for field in frame.fields %}
        {%- if field.actual_size == 1 %}
    raw_data->data[{{ field.offset }} + KALMAN_PROTOCOL_STATUS_REPORT_ID_BYTES] = frame->{{ field.name }};
        {%- elif field.is_type_cast %}
    *(({{ field.cast_type }}*)&raw_data->data[{{ field.offset }} + KALMAN_PROTOCOL_STATUS_REPORT_ID_BYTES]) = frame->{{ field.name }};
        {%- else %}
    *(({{ field.type }}*)&raw_data->data[{{ field.offset }} + KALMAN_PROTOCOL_STATUS_REPORT_ID_BYTES]) = frame->{{ field.name }};
        {%- endif  %}
    {%- endfor %}

    raw_data->length = sizeof({{ frame_type }}) + KALMAN_PROTOCOL_STATUS_REPORT_ID_BYTES;

    return KALMAN_PROTOCOL_STATUS_OK;
}

////////////////////////////////////////
/// Health Checks
////////////////////////////////////////
{%- for field in frame.fields if field.is_health_check %}
StatusReportResult_TypeDef {{ frame.name }}_{{ snake_to_camel(field.name) }}_HealthCheckResult(const {{ frame_type }}* frame) {
    {%- for health_check in field.health_checks %}
        {%- if health_check.type == 'exact' %}
    if (frame->{{ field.name }} == KALMAN_STATUS_{{frame.name | upper}}_{{field.name | upper}}_HEALTH_CHECK_{{health_check.result | upper}}_{{ loop.index0 + 1}}) {
        return {{ health_check.result | upper }};
    }
        {%- elif health_check.type == 'range' %}
    if (frame->{{ field.name }} >= KALMAN_STATUS_{{frame.name | upper}}_{{field.name | upper}}_HEALTH_CHECK_{{health_check.result | upper}}_{{ loop.index0 + 1}}_MIN
            && frame->{{ field.name }} < KALMAN_STATUS_{{frame.name | upper}}_{{field.name | upper}}_HEALTH_CHECK_{{health_check.result | upper}}_{{ loop.index0 + 1}}_MAX) {
        return {{ health_check.result | upper }};
    }
        {%- endif %}
    {%- endfor %}
    return UNKNOWN;
}
{% endfor %}

{%- for field in frame.fields if field.is_health_check %}
const char* {{ frame.name }}_{{ snake_to_camel(field.name) }}_HealthCheckTroubleshoot(const {{ frame_type }}* frame) {
    {%- for health_check in field.health_checks %}
        {%- if health_check.troubleshoot != none %}
    if (frame->{{ field.name }} == KALMAN_STATUS_{{frame.name | upper}}_{{field.name | upper}}_HEALTH_CHECK_{{health_check.result | upper}}_{{ loop.index0 + 1}}) {
        return KALMAN_STATUS_{{frame.name | upper}}_{{field.name | upper}}_HEALTH_CHECK_{{health_check.result | upper}}_{{ loop.index0 + 1}}_TROUBLESHOOT;
    }
        {%- endif %}
    {%- endfor %}
    return "Unknown troubleshoot";
}
{% endfor -%}

{%- for field in frame.fields if field.is_health_check %}
const char* {{ frame.name }}_{{ snake_to_camel(field.name) }}_HealthCheckDescription(const {{ frame_type }}* frame) {
    {%- for health_check in field.health_checks %}
        {%- if health_check.description != none %}
    if (frame->{{ field.name }} == KALMAN_STATUS_{{frame.name | upper}}_{{field.name | upper}}_HEALTH_CHECK_{{health_check.result | upper}}_{{ loop.index0 + 1}}) {
        return KALMAN_STATUS_{{frame.name | upper}}_{{field.name | upper}}_HEALTH_CHECK_{{health_check.result | upper}}_{{ loop.index0 + 1}}_DESCRIPTION;
    }
        {%- endif %}
    {%- endfor %}
    return "Unknown description";
}
{% endfor -%}

{% endfor %}

#endif // KALMAN_STATUS_REPORT_{{ protocol.subsytem  | upper }}_H_